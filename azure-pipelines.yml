# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  agentpool: 'dockeragent_moises'
  prodEnvironmentName: 'production'
  webAppName: 'pokecatalogdb'
  projectName: 'Catalog.API'
  azureSubscription: 'Azure for Students(0c9ccb5a-239a-4bc1-ba6d-cfaf10231094)'
  AppPublishDir: '/app/publish'
  netVer: 'net6.0'
  arch: 'linux-x64'
  # --framework $(netVer) -r $(arch) --self-contained false 

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool: $(agentpool)

    steps:
    - task: CmdLine@2
      displayName: 'Update system, its dependencies and install zip utility.'
      inputs:
        script: |
          apt-get update \
              && apt-get install -y zip apt-transport-https \
              && apt-get autoremove \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: '6.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore project'
      inputs:
        command: 'custom'
        projects: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)/$(projectName).csproj'
        custom: 'restore'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)/$(projectName).csproj'
        arguments: '-c $(buildConfiguration) -o /app/build'
        workingDirectory: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-c $(buildConfiguration) -o $(AppPublishDir)'
        zipAfterPublish: false
        workingDirectory: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)'

    - task: ArchiveFiles@2
      displayName: 'Archive files and move publish pipeline artifacts folder'
      inputs:
        rootFolderOrFile: '$(AppPublishDir)/$(projectName)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: CopyFiles@2
      displayName: 'Copy Files to Publish Artifacts Directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        artifact: '$(Build.BuildId)'
        publishLocation: 'pipeline'
              
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(prodEnvironmentName)
    pool: $(agentpool)
    #   vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download pipeline artifacts'
            inputs:
              buildType: 'current'
              artifactName: '$(Build.BuildId)'
              targetPath: '$(Pipeline.Workspace)'
              
          - task: CmdLine@2
            displayName: 'Delete buggy folder from .NET 6'
            inputs:
              script: 'rm -rf /home/site/wwwroot/wwwroot/Identity/lib/bootstrap/LICENSE/LICENSE'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy to Azure App Service'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/$(Build.BuildId).zip'
              RuntimeStack: 'DOTNETCORE|6.0'
              StartupCommand: 'dotnet $(projectName).dll'